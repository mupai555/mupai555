"""
ETA Block - Efecto T√©rmico de los Alimentos (Thermal Effect of Food)

Este m√≥dulo contiene toda la funcionalidad relacionada con el c√°lculo del Efecto T√©rmico 
de los Alimentos (ETA), incluyendo funciones de c√°lculo, validaci√≥n y componentes visuales.

Caracter√≠sticas principales:
- C√°lculo cient√≠fico del ETA basado en composici√≥n corporal y sexo
- Validaci√≥n de datos de entrada
- Interfaz visual con tarjetas informativas
- Actualizaci√≥n del estado de sesi√≥n
- Integraci√≥n lista para el flujo principal de la aplicaci√≥n
"""

import streamlit as st


def calcular_tmb_cunningham(mlg):
    """
    Calcula el TMB (Tasa Metab√≥lica Basal) usando la f√≥rmula de Cunningham.
    
    Args:
        mlg: Masa Libre de Grasa en kg
        
    Returns:
        float: TMB en kcal/d√≠a
    """
    try:
        mlg = float(mlg)
    except (TypeError, ValueError):
        mlg = 0.0
    return 370 + (21.6 * mlg)


def calcular_mlg(peso, porcentaje_grasa):
    """
    Calcula la Masa Libre de Grasa.
    
    Args:
        peso: Peso corporal en kg
        porcentaje_grasa: Porcentaje de grasa corporal
        
    Returns:
        float: Masa Libre de Grasa en kg
    """
    try:
        peso = float(peso)
        porcentaje_grasa = float(porcentaje_grasa)
    except (TypeError, ValueError):
        peso = 0.0
        porcentaje_grasa = 0.0
    return peso * (1 - porcentaje_grasa / 100)


def corregir_porcentaje_grasa(medido, metodo, sexo):
    """
    Corrige el porcentaje de grasa seg√∫n el m√©todo de medici√≥n.
    Si el m√©todo es Omron, ajusta con tablas especializadas por sexo.
    Si InBody, aplica factor.
    Si BodPod, aplica factor por sexo.
    Si DEXA, devuelve el valor medido.
    
    Args:
        medido: Porcentaje de grasa medido
        metodo: M√©todo de medici√≥n utilizado
        sexo: "Hombre" o "Mujer"
        
    Returns:
        float: Porcentaje de grasa corregido
    """
    try:
        medido = float(medido)
    except (TypeError, ValueError):
        medido = 20.0
    
    if metodo == "Omron HBF-516 (BIA)":
        # Tabla de conversi√≥n para hombres
        if sexo == "Hombre":
            tabla = {
                5: 4.2, 6: 5.2, 7: 6.2, 8: 7.2, 9: 8.2,
                10: 9.7, 11: 10.7, 12: 11.7, 13: 12.7, 14: 13.7,
                15: 15.2, 16: 16.2, 17: 17.2, 18: 18.2, 19: 19.2,
                20: 20.7, 21: 21.7, 22: 22.7, 23: 23.7, 24: 24.7,
                25: 26.2, 26: 27.2, 27: 28.2, 28: 29.2, 29: 30.2,
                30: 31.7, 31: 32.7, 32: 33.7, 33: 34.7, 34: 35.7,
                35: 37.2, 36: 38.2, 37: 39.2, 38: 40.2, 39: 41.2,
                40: 42.2
            }
        else:  # Mujer
            tabla = {
                5: 5.7, 6: 6.7, 7: 7.7, 8: 8.7, 9: 9.7,
                10: 10.2, 11: 11.2, 12: 12.2, 13: 13.2, 14: 14.2,
                15: 15.7, 16: 16.7, 17: 17.7, 18: 18.7, 19: 19.7,
                20: 20.2, 21: 21.2, 22: 22.2, 23: 23.2, 24: 24.2,
                25: 26.7, 26: 27.7, 27: 28.7, 28: 29.7, 29: 30.7,
                30: 33.2, 31: 34.2, 32: 35.2, 33: 36.2, 34: 37.2,
                35: 39.7, 36: 40.7, 37: 41.7, 38: 42.7, 39: 43.7,
                40: 44.7
            }
        
        grasa_redondeada = int(round(medido))
        grasa_redondeada = min(max(grasa_redondeada, 5), 40)
        return tabla.get(grasa_redondeada, medido)
    elif metodo == "InBody 270 (BIA profesional)":
        return medido * 1.02
    elif metodo == "Bod Pod (Pletismograf√≠a)":
        factor = 1.0 if sexo == "Mujer" else 1.03
        return medido * factor
    else:  # DEXA (Gold Standard) u otros
        return medido


def obtener_geaf(nivel):
    """
    Devuelve el factor de actividad f√≠sica (GEAF) seg√∫n el nivel.
    
    Args:
        nivel: Nivel de actividad f√≠sica
        
    Returns:
        float: Factor GEAF
    """
    valores = {
        "Sedentario": 1.00,
        "Moderadamente-activo": 1.11,
        "Activo": 1.25,
        "Muy-activo": 1.45
    }
    return valores.get(nivel, 1.00)


def calcular_eta_automatico(tmb, geaf, porcentaje_grasa, sexo):
    """
    Calcula el Efecto T√©rmico de los Alimentos (ETA) autom√°ticamente.
    F√≥rmula cient√≠fica basada en composici√≥n corporal y gasto energ√©tico.
    
    Args:
        tmb: Tasa Metab√≥lica Basal (kcal)
        geaf: Factor de Actividad F√≠sica
        porcentaje_grasa: Porcentaje de grasa corporal
        sexo: "Hombre" o "Mujer"
    
    Returns:
        float: ETA en kcal/d√≠a
    """
    try:
        tmb = float(tmb)
        geaf = float(geaf)
        porcentaje_grasa = float(porcentaje_grasa)
    except (TypeError, ValueError):
        return 0.0
    
    # Gasto energ√©tico base (TMB * GEAF)
    gasto_base = tmb * geaf
    
    # Factor ETA basado en composici√≥n corporal y sexo
    # Personas m√°s magras tienen mayor ETA debido a mayor masa muscular
    if sexo == "Hombre":
        if porcentaje_grasa <= 10:
            factor_eta = 0.12  # 12% para hombres muy magros
        elif porcentaje_grasa <= 15:
            factor_eta = 0.11  # 11% para hombres magros
        elif porcentaje_grasa <= 20:
            factor_eta = 0.10  # 10% para hombres normales
        else:
            factor_eta = 0.09  # 9% para hombres con m√°s grasa
    else:  # Mujer
        if porcentaje_grasa <= 16:
            factor_eta = 0.11  # 11% para mujeres muy magras
        elif porcentaje_grasa <= 21:
            factor_eta = 0.10  # 10% para mujeres magras
        elif porcentaje_grasa <= 26:
            factor_eta = 0.09  # 9% para mujeres normales
        else:
            factor_eta = 0.08  # 8% para mujeres con m√°s grasa
    
    # ETA = Factor * Gasto energ√©tico base
    eta = gasto_base * factor_eta
    
    return round(eta, 1)


def validate_step_5():
    """
    Valida que el paso 5 (efecto t√©rmico) est√© completo.
    
    Returns:
        bool: True si el paso est√° v√°lido, False en caso contrario
    """
    # ETA se calcula autom√°ticamente, solo necesitamos los datos previos
    peso = st.session_state.get("peso", 0)
    porcentaje_grasa = st.session_state.get("grasa_corporal", 0)
    actividad = st.session_state.get("actividad_diaria", "")
    return peso > 0 and porcentaje_grasa > 0 and len(actividad) > 0


def crear_tarjeta_eta(titulo, contenido, tipo="info"):
    """
    Crea una tarjeta visual para mostrar informaci√≥n del ETA.
    
    Args:
        titulo: T√≠tulo de la tarjeta
        contenido: Contenido de la tarjeta
        tipo: Tipo de tarjeta (info, success, warning, error)
    """
    color_map = {
        "info": "#17a2b8",
        "success": "#28a745", 
        "warning": "#ffc107",
        "error": "#dc3545"
    }
    color = color_map.get(tipo, "#17a2b8")
    
    st.markdown(f"""
    <div style="
        border-left: 4px solid {color};
        background: linear-gradient(135deg, #1e1e1e 0%, #2a2a2a 100%);
        padding: 1rem;
        margin: 1rem 0;
        border-radius: 0 8px 8px 0;
        box-shadow: 0 4px 12px rgba(0,0,0,0.3);
    ">
        <h4 style="color: {color}; margin: 0 0 0.5rem 0;">{titulo}</h4>
        <p style="color: #cccccc; margin: 0;">{contenido}</p>
    </div>
    """, unsafe_allow_html=True)


def mostrar_bloque_eta():
    """
    Funci√≥n principal que muestra el bloque completo del ETA (Paso 5).
    Incluye toda la l√≥gica visual y de c√°lculo para el Efecto T√©rmico de los Alimentos.
    
    Returns:
        bool: True si el paso est√° v√°lido y completo
    """
    st.markdown("""
    <div class="step-header">
        <h1 class="step-title">üçΩÔ∏è Paso 5: Efecto T√©rmico de los Alimentos</h1>
        <p class="step-subtitle">C√°lculo autom√°tico del gasto energ√©tico adicional por digesti√≥n</p>
    </div>
    """, unsafe_allow_html=True)
    
    st.markdown('<div class="content-card">', unsafe_allow_html=True)
    
    # Obtener datos previos para calcular ETA autom√°ticamente
    peso = st.session_state.get("peso", 0)
    grasa_corporal = st.session_state.get("grasa_corporal", 0)
    metodo_grasa = st.session_state.get("metodo_grasa", "DEXA (Gold Standard)")
    actividad_diaria = st.session_state.get("actividad_diaria", "")
    sexo = st.session_state.get("sexo", "Hombre")
    
    if peso > 0 and grasa_corporal > 0 and actividad_diaria:
        # Calcular valores necesarios
        grasa_corregida = corregir_porcentaje_grasa(grasa_corporal, metodo_grasa, sexo)
        mlg = calcular_mlg(peso, grasa_corregida)
        tmb = calcular_tmb_cunningham(mlg)
        geaf = obtener_geaf(actividad_diaria)
        eta_calculado = calcular_eta_automatico(tmb, geaf, grasa_corregida, sexo)
        
        # Mostrar informaci√≥n cient√≠fica
        st.markdown("### üß¨ C√°lculo Cient√≠fico del ETA")
        st.info("""
        **üí° ¬øQu√© es el Efecto T√©rmico de los Alimentos (ETA)?**
        
        Es el aumento temporal del gasto energ√©tico despu√©s de comer, debido al proceso de digesti√≥n, absorci√≥n, transporte y metabolismo de los nutrientes. Representa t√≠picamente 8-15% del gasto energ√©tico total diario.
        """)
        
        # Mostrar resultados autom√°ticos en tarjetas visuales
        col1, col2, col3 = st.columns(3)
        with col1:
            st.metric(
                "üî• TMB (Cunningham)", 
                f"{tmb:.0f} kcal/d√≠a",
                help="Tasa Metab√≥lica Basal calculada con f√≥rmula de Cunningham"
            )
        with col2:
            st.metric(
                "üö∂ Factor GEAF", 
                f"{geaf:.2f}",
                help=f"Factor de actividad f√≠sica: {actividad_diaria}"
            )
        with col3:
            st.metric(
                "üçΩÔ∏è ETA Calculado", 
                f"{eta_calculado:.0f} kcal/d√≠a",
                help="Efecto T√©rmico de los Alimentos calculado autom√°ticamente"
            )
        
        # Guardar el ETA calculado en session_state
        st.session_state.eta_calculado = eta_calculado
        
        # Explicaci√≥n del c√°lculo
        factor_eta = eta_calculado / (tmb * geaf) * 100 if (tmb * geaf) > 0 else 0
        st.markdown(f"""
        **üìä Detalles del c√°lculo:**
        - **Gasto energ√©tico base:** {tmb:.0f} √ó {geaf:.2f} = {(tmb * geaf):.0f} kcal/d√≠a
        - **Factor ETA aplicado:** {factor_eta:.1f}% (basado en composici√≥n corporal)
        - **ETA resultante:** {eta_calculado:.0f} kcal/d√≠a
        """)
        
        st.success("‚úÖ **ETA calculado autom√°ticamente con base cient√≠fica**")
        
        # Mostrar tarjetas informativas adicionales
        crear_tarjeta_eta(
            "üî¨ Base Cient√≠fica",
            "El c√°lculo se basa en la composici√≥n corporal espec√≠fica del usuario. Las personas con mayor masa muscular (menor % grasa) tienen un ETA m√°s alto debido al mayor costo energ√©tico del tejido muscular.",
            "info"
        )
        
        crear_tarjeta_eta(
            "‚öñÔ∏è Factores Considerados",
            f"Sexo: {sexo} | Grasa corporal: {grasa_corregida:.1f}% | Actividad: {actividad_diaria} | Factor aplicado: {factor_eta:.1f}%",
            "success"
        )
        
    else:
        st.warning("‚ö†Ô∏è Completa los pasos anteriores para calcular el ETA autom√°ticamente")
        
        # Mostrar informaci√≥n educativa mientras no hay datos
        crear_tarjeta_eta(
            "üìö ¬øPor qu√© es importante el ETA?",
            "El Efecto T√©rmico de los Alimentos es un componente clave del gasto energ√©tico total diario. Su c√°lculo preciso permite una estimaci√≥n m√°s exacta de las necesidades cal√≥ricas.",
            "info"
        )
    
    st.markdown('</div>', unsafe_allow_html=True)
    
    # Validar si el paso est√° completo
    is_step_5_valid = validate_step_5()
    if is_step_5_valid:
        st.markdown('<div class="step-motivation">‚ö° ¬°Perfecto! Un paso m√°s y terminamos.</div>', unsafe_allow_html=True)
    
    return is_step_5_valid


# Funci√≥n de conveniencia para obtener el ETA calculado
def obtener_eta_calculado():
    """
    Obtiene el ETA calculado del estado de sesi√≥n.
    
    Returns:
        float: ETA calculado en kcal/d√≠a, o 0 si no est√° disponible
    """
    return st.session_state.get("eta_calculado", 0.0)


# Funci√≥n para recalcular ETA con nuevos par√°metros
def recalcular_eta(peso, grasa_corporal, metodo_grasa, actividad_diaria, sexo):
    """
    Recalcula el ETA con nuevos par√°metros y actualiza el estado de sesi√≥n.
    
    Args:
        peso: Peso corporal en kg
        grasa_corporal: Porcentaje de grasa corporal
        metodo_grasa: M√©todo de medici√≥n de grasa
        actividad_diaria: Nivel de actividad diaria
        sexo: "Hombre" o "Mujer"
        
    Returns:
        float: ETA recalculado en kcal/d√≠a
    """
    if peso > 0 and grasa_corporal > 0 and actividad_diaria:
        grasa_corregida = corregir_porcentaje_grasa(grasa_corporal, metodo_grasa, sexo)
        mlg = calcular_mlg(peso, grasa_corregida)
        tmb = calcular_tmb_cunningham(mlg)
        geaf = obtener_geaf(actividad_diaria)
        eta_calculado = calcular_eta_automatico(tmb, geaf, grasa_corregida, sexo)
        
        # Actualizar el estado de sesi√≥n
        st.session_state.eta_calculado = eta_calculado
        
        return eta_calculado
    
    return 0.0